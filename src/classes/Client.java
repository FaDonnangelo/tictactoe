package classes;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class Client extends javax.swing.JFrame {

    int[][] jogo = new int[3][3];
    int turno = 1;
    Graphics g;
    Path currentDir;
    JLabel label;
    int pontos = 0;
    int pontosAdversario = 0;
    String tipo = "";

    public Client() {
        initComponents();
        g = jPanel1.getGraphics();
        currentDir = Paths.get("").toAbsolutePath();
        label = this.status;
    }

    public void apagarJogo() {
        g.setColor(Color.WHITE);
        g.fillRect(170, 70, 250, 250);
    }

    public void pintarJogo() {
        g.setColor(Color.BLACK);
        g.fillRect(250, 70, 1, 250);//Esquerda
        g.fillRect(170, 150, 250, 1);//Cima
        g.fillRect(340, 70, 1, 250);//Direita
        g.fillRect(170, 240, 250, 1);//Baixo

    }

    public void printar(String message) {
        System.out.println(message);
    }

    public void atualizarJogo() {
        try {
            BufferedImage imageO = ImageIO.read(new File(currentDir + "/src/image/O.png"));
            BufferedImage imageX = ImageIO.read(new File(currentDir + "/src/image/X.png"));
            for (int i = 0; i < jogo.length; i++) {
                for (int j = 0; j < jogo[0].length; j++) {

                    if (i == 0 && j == 0) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 170, 70, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 170, 70, 80, 80, rootPane);
                        }

                    } else if (i == 0 && j == 1) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 250, 70, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 250, 70, 80, 80, rootPane);
                        }
                    } else if (i == 0 && j == 2) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 340, 70, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 340, 70, 80, 80, rootPane);
                        }
                    } else if (i == 1 && j == 0) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 170, 150, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 170, 150, 80, 80, rootPane);
                        }

                    } else if (i == 1 && j == 1) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 250, 150, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 250, 150, 80, 80, rootPane);
                        }

                    } else if (i == 1 && j == 2) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 340, 150, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 340, 150, 80, 80, rootPane);
                        }

                    } else if (i == 2 && j == 0) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 170, 240, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 170, 240, 80, 80, rootPane);
                        }

                    } else if (i == 2 && j == 1) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 250, 240, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 250, 240, 80, 80, rootPane);
                        }

                    } else if (i == 2 && j == 2) {
                        if (jogo[i][j] == 1) {
                            g.drawImage(imageX, 340, 240, 80, 80, rootPane);

                        } else if (jogo[i][j] == 2) {
                            g.drawImage(imageO, 340, 240, 80, 80, rootPane);
                        }

                    }
                }
            }

        } catch (Exception e) {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        aguardandoLabel = new javax.swing.JLabel();
        pontosDeles = new javax.swing.JLabel();
        seusPontos = new javax.swing.JLabel();
        tipoLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        suaPontuacao = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pontuacaoDeles = new javax.swing.JLabel();
        status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jTextField1.setText("localhost");

        jLabel1.setText("Server:");

        jLabel2.setText("Porta:");

        jTextField2.setText("6789");

        connectButton.setText("Conectar");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("Desconectar");
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 400));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });
        jPanel1.setLayout(null);
        jPanel1.add(aguardandoLabel);
        aguardandoLabel.setBounds(271, 37, 0, 0);
        jPanel1.add(pontosDeles);
        pontosDeles.setBounds(100, 30, 0, 0);
        jPanel1.add(seusPontos);
        seusPontos.setBounds(100, 10, 0, 0);
        jPanel1.add(tipoLabel);
        tipoLabel.setBounds(70, 60, 0, 0);

        jLabel3.setText("Seus pontos");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 10, 80, 14);

        suaPontuacao.setText("0");
        jPanel1.add(suaPontuacao);
        suaPontuacao.setBounds(110, 10, 30, 14);

        jLabel5.setText("Seu adversario:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 40, 100, 14);

        pontuacaoDeles.setText("0");
        jPanel1.add(pontuacaoDeles);
        pontuacaoDeles.setBounds(110, 40, 30, 14);

        status.setText("...");
        jPanel1.add(status);
        status.setBounds(230, 10, 130, 14);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(connectButton)
                    .addComponent(disconnectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disconnectButton))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            String server = jTextField1.getText();
            int porta = Integer.parseInt(jTextField2.getText());
            tcpClient = new TCPClientMain(server, porta, this);
            connectButton.setEnabled(false);
            disconnectButton.setEnabled(true);
            jPanel1.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_connectButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        closeConnection();
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained


    }//GEN-LAST:event_jPanel1FocusGained

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed

    }//GEN-LAST:event_jPanel1KeyPressed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        jPanel1.requestFocus();

    }//GEN-LAST:event_formFocusGained

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if ("".equals(this.aguardandoLabel.getText())) {

            String message = "";
            int x = evt.getPoint().x;
            int y = evt.getPoint().y;
            int i = 0;
            int j = 0;
            if (x < 250 && y < 150) {
                i = 0;
                j = 0;
            } else if (x < 340 && x > 250 && y < 150) {
                i = 0;
                j = 1;
            } else if (x > 340 && y < 150 && x < 600) {
                i = 0;
                j = 2;
            } else if (x < 250 && y > 150 && y < 240) {
                i = 1;
                j = 0;
            } else if (x > 250 && x < 340 && y > 150 && y < 240) {
                i = 1;
                j = 1;
            } else if (x > 340 && y > 150 && y < 240 && x < 600) {
                i = 1;
                j = 2;
            } else if (x < 250 && y > 240 && y < 400) {
                i = 2;
                j = 0;
            } else if (x > 250 && x < 340 && y > 240 && y < 400) {
                i = 2;
                j = 1;
            } else if (x > 340 && y > 240 && y < 400 && x < 600) {
                i = 2;
                j = 2;
            }

            if (turno % 2 != 0 && "X".equals(tipo) && jogo[i][j] == 0) {
                jogo[i][j] = 1;
                message = i + "|" + j;
                tcpClient.writeMessage(message);

            } else if (turno % 2 == 0 && "O".equals(tipo) && jogo[i][j] == 0) {
                jogo[i][j] = 2;
                message = i + "|" + j;
                tcpClient.writeMessage(message);

            }

            pintarJogo();

        }


    }//GEN-LAST:event_jPanel1MouseClicked

    public void sendSignal(String message) {
        tcpClient.writeMessage(message);

    }

    public void closeConnection() {
        try {
            tcpClient.closeConnection();
            connectButton.setEnabled(true);
            disconnectButton.setEnabled(false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    public String arrayStringify() {
        String array = "";
        for (int i = 0; i < this.jogo.length; i++) {
            for (int j = 0; j < this.jogo[0].length; j++) {
                array = array + String.valueOf(this.jogo[i][j]);
            }
        }
        return array;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Client().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aguardandoLabel;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    public javax.swing.JLabel pontosDeles;
    public javax.swing.JLabel pontuacaoDeles;
    public javax.swing.JLabel seusPontos;
    public javax.swing.JLabel status;
    public javax.swing.JLabel suaPontuacao;
    public javax.swing.JLabel tipoLabel;
    // End of variables declaration//GEN-END:variables
    private TCPClientMain tcpClient;
}
